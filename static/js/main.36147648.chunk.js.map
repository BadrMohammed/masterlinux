{"version":3,"sources":["Redux/Actions/types.js","Redux/Reducers/methods.js","Redux/Reducers/QuestionsR.js","Redux/Reducers/index.js","Redux/Actions/GeneralAction.js","ReusableCompnents/Header.js","ReusableCompnents/GeneralFunctions.js","ReusableCompnents/_questions.js","Components/Questions/UserPrompt.js","Components/Questions/QuestionCard.js","Components/Questions/Questions.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_QUESTIONS_PROPS","MERGE_QUESTIONS_PROPS","DELETE_QUESTIONS_PROPS","CLEAR_QUESTIONS_STATE","updateProps","state","action","newState","i","payload","length","dotProp","set","prop","value","mergeProps","merge","deleteProps","delete","INITIAL_STATE","answers","questions","question_index","prompet","isOpen","userName","isRegister","QuestionsR","type","general","combineReducers","key","Header","Navbar","className","light","showNotificationMessage","title","swal","then","res","arrange_array_randomly","indexs","items","newItems","random_index","Math","floor","random","push","filter","_questions","id","question","answer","choices","label","UserPrompt","getArrayOfIndexs","forEach","element","index","Dialog","open","fullWidth","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","variant","onChange","e","target","DialogActions","Button","onClick","newQuestions","map","q","QuestionCard","Card","Container","Row","Col","xl","lg","md","sm","xs","choice","checked","question_id","find","an","htmlFor","preventDefault","disabled","total","connect","actions","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36147648.chunk.js","sourcesContent":["// // QUESTIONS\r\nexport const UPDATE_QUESTIONS_PROPS = \"UPDATE_CATEGORIES_PROPS\";\r\nexport const MERGE_QUESTIONS_PROPS = \"MERGE_CATEGORIES_PROPS\";\r\nexport const DELETE_QUESTIONS_PROPS = \"DELETE_CATEGORIES_PROPS\";\r\nexport const CLEAR_QUESTIONS_STATE = \"CLEAR_CATEGORIES_STATE\";\r\n","import dotProp from \"dot-prop-immutable\";\r\n\r\nexport const updateProps = (state, action) => {\r\n  let newState = state;\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.set(\r\n      newState,\r\n      action.payload[i].prop,\r\n      action.payload[i].value\r\n    );\r\n  }\r\n  return newState;\r\n};\r\n\r\nexport const mergeProps = (state, action) => {\r\n  let newState = state;\r\n\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.merge(\r\n      newState,\r\n      action.payload[i].prop,\r\n      action.payload[i].value\r\n    );\r\n  }\r\n  return newState;\r\n};\r\n\r\nexport const deleteProps = (state, action) => {\r\n  let newState = state;\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.delete(newState, action.payload[i].prop);\r\n  }\r\n  return newState;\r\n};\r\n","import {\r\n  UPDATE_QUESTIONS_PROPS,\r\n  MERGE_QUESTIONS_PROPS,\r\n  DELETE_QUESTIONS_PROPS,\r\n  CLEAR_QUESTIONS_STATE,\r\n} from \"../Actions/types\";\r\nimport * as general from \"./methods\";\r\n\r\nconst INITIAL_STATE = {\r\n  answers: [],\r\n  questions: [],\r\n  question_index: 0,\r\n  prompet: { isOpen: true, userName: \"\", isRegister: false },\r\n};\r\n\r\nconst QuestionsR = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_QUESTIONS_PROPS: {\r\n      return general.updateProps(state, action);\r\n    }\r\n    case MERGE_QUESTIONS_PROPS: {\r\n      return general.mergeProps(state, action);\r\n    }\r\n    case DELETE_QUESTIONS_PROPS: {\r\n      return general.deleteProps(state, action);\r\n    }\r\n    case CLEAR_QUESTIONS_STATE: {\r\n      let newState = state;\r\n      newState = INITIAL_STATE;\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default QuestionsR;\r\n","import { combineReducers } from \"redux\";\r\nimport QuestionsR from \"./QuestionsR\";\r\n\r\nexport default combineReducers({\r\n  QuestionsR,\r\n});\r\n","export const general = (payload, key) => {\r\n  return { type: key, payload };\r\n};\r\n","import React from \"react\";\r\nimport { Navbar } from \"reactstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <Navbar className=\"header center\" light>\r\n        <p className=\"text-center\">mcq program</p>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import swal from \"sweetalert\";\r\nimport { CLEAR_QUESTIONS_STATE } from \"../Redux/Actions/types\";\r\nexport const showNotificationMessage = (title, type, general) => {\r\n  swal(title, \"\", type).then((res) => {\r\n    general([], CLEAR_QUESTIONS_STATE);\r\n  });\r\n};\r\n\r\nexport const arrange_array_randomly = (indexs, items, newItems) => {\r\n  let random_index = indexs[Math.floor(Math.random() * indexs.length)];\r\n  newItems.push(items[random_index]);\r\n  indexs = indexs.filter((i) => i !== random_index);\r\n  if (indexs.length > 0) {\r\n    return arrange_array_randomly(indexs, items, newItems);\r\n  } else {\r\n    return newItems;\r\n  }\r\n};\r\n","export const _questions = [\r\n  {\r\n    id: 1,\r\n    question: \"Who is the first President of the Arab Republic of Egypt\",\r\n    answer: 2,\r\n    choices: [\r\n      { label: \"Anwar el Sadat\", value: 1 },\r\n      { label: \"Mohamed Naguib\", value: 2 },\r\n      { label: \"Gamal Abdel Nasser\", value: 3 },\r\n      { label: \"Hosni Mubarak\", value: 4 },\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    question: \"Who is the first Arab to win the Nobel Prize in Literature?\",\r\n    answer: 4,\r\n    choices: [\r\n      { label: \"Ahmad Morad\", value: 1 },\r\n      { label: \"Ahmed El Saadawi\", value: 2 },\r\n      { label: \"Ragaa Alam\", value: 3 },\r\n      { label: \"Naguib Mahfouz\", value: 4 },\r\n    ],\r\n  },\r\n  {\r\n    id: 3,\r\n    question: \"The first Arab country to participate in the World Cup\",\r\n    answer: 1,\r\n    choices: [\r\n      { label: \"Egypt\", value: 1 },\r\n      { label: \"Saudi Arabia\", value: 2 },\r\n      { label: \"Tunisia\", value: 3 },\r\n      { label: \"Morocco\", value: 4 },\r\n    ],\r\n  },\r\n\r\n  {\r\n    id: 4,\r\n    question: '\"Who is the hero of the movie \"The Message\"?',\r\n    answer: 2,\r\n    choices: [\r\n      { label: \"Rushdi Abaza\", value: 1 },\r\n      { label: \"Abdullah Ghaith\", value: 2 },\r\n      { label: \"Adel Emam\", value: 3 },\r\n      { label: \"Ahmed Zaki\", value: 4 },\r\n    ],\r\n  },\r\n  {\r\n    id: 5,\r\n    question:\r\n      \"The first Egyptian, Arab and African swimmer to win two gold medals in swimming throughout the history of the Mediterranean courses\",\r\n    answer: 1,\r\n    choices: [\r\n      { label: \"Rania Alwani\", value: 1 },\r\n      { label: \"Farida Othman\", value: 2 },\r\n      { label: \"Ines Haqi\", value: 3 },\r\n      { label: \"Reem Qassem\", value: 4 },\r\n    ],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport { UPDATE_QUESTIONS_PROPS } from \"../../Redux/Actions/types\";\r\nimport {\r\n  arrange_array_randomly,\r\n  showNotificationMessage,\r\n} from \"../../ReusableCompnents/GeneralFunctions\";\r\nimport { _questions } from \"../../ReusableCompnents/_questions\";\r\n\r\nexport const UserPrompt = ({ general, prompet }) => {\r\n  function getArrayOfIndexs(items) {\r\n    let indexs = [];\r\n    items.forEach((element, index) => {\r\n      indexs.push(index);\r\n    });\r\n    return indexs;\r\n  }\r\n  const handleSave = () => {\r\n    if (prompet.userName) {\r\n      let newQuestions = _questions.map((q) => {\r\n        q.choices = arrange_array_randomly(\r\n          getArrayOfIndexs(q.choices),\r\n          q.choices,\r\n          []\r\n        );\r\n        return q;\r\n      });\r\n\r\n      newQuestions = arrange_array_randomly(\r\n        getArrayOfIndexs(newQuestions),\r\n        newQuestions,\r\n        []\r\n      );\r\n\r\n      general(\r\n        [\r\n          { prop: \"questions\", value: newQuestions },\r\n          { prop: \"prompet.isRegister\", value: true },\r\n          { prop: \"prompet.isOpen\", value: false },\r\n        ],\r\n        UPDATE_QUESTIONS_PROPS\r\n      );\r\n    } else {\r\n      showNotificationMessage(\"Please enter your Name\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={prompet.isOpen} fullWidth={true}>\r\n        <DialogTitle>Enter your FullName</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Make sure you enter your name correctly\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"FullName\"\r\n            type=\"text\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={prompet.userName}\r\n            onChange={(e) =>\r\n              general(\r\n                [{ prop: \"prompet.userName\", value: e.target.value }],\r\n                UPDATE_QUESTIONS_PROPS\r\n              )\r\n            }\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleSave}>Save</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import { Card, Col, Row, Container, Button } from \"reactstrap\";\r\nimport { UPDATE_QUESTIONS_PROPS } from \"../../Redux/Actions/types\";\r\nimport { showNotificationMessage } from \"../../ReusableCompnents/GeneralFunctions\";\r\n\r\nexport const QuestionCard = ({\r\n  element,\r\n  question_index,\r\n  general,\r\n  answers,\r\n  questions,\r\n}) => {\r\n  const handlePrevious = (e) => {\r\n    e.preventDefault();\r\n    if (question_index - 1 >= 0) {\r\n      general(\r\n        [{ prop: \"question_index\", value: question_index - 1 }],\r\n        UPDATE_QUESTIONS_PROPS\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleNext = (e) => {\r\n    e.preventDefault();\r\n    if (question_index + 1 <= 4) {\r\n      general(\r\n        [{ prop: \"question_index\", value: question_index + 1 }],\r\n        UPDATE_QUESTIONS_PROPS\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSave = (e) => {\r\n    e.preventDefault();\r\n    let total = 0;\r\n    answers.forEach((element, index) => {\r\n      if (element) {\r\n        if (element.answer === questions[index].answer) {\r\n          total += 20;\r\n        }\r\n      }\r\n    });\r\n    if (total > 49) {\r\n      showNotificationMessage(`you scored ${total} %`, \"success\", general);\r\n    } else {\r\n      showNotificationMessage(`you scored ${total} %`, \"error\", general);\r\n    }\r\n  };\r\n  return (\r\n    <Card className=\"question_card\">\r\n      <Container>\r\n        <Row className=\"mt-4\">\r\n          <Col xl={12} lg={12} md={12} sm={12} xs={12} className=\"center\">\r\n            <p>{element.question}</p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xl={12} lg={12} md={12} sm={12} xs={12}>\r\n            <ul>\r\n              {element.choices.map((choice, index) => {\r\n                return (\r\n                  <li className=\"mt-4 flex alignItem\" key={choice.value}>\r\n                    <div className=\"round\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={\"checkbox\" + index}\r\n                        onChange={(e) =>\r\n                          e.target.checked === true\r\n                            ? general(\r\n                                [\r\n                                  {\r\n                                    prop: \"answers.\" + question_index,\r\n                                    value: {\r\n                                      question_id: element.id,\r\n                                      answer: choice.value,\r\n                                    },\r\n                                  },\r\n                                ],\r\n                                UPDATE_QUESTIONS_PROPS\r\n                              )\r\n                            : general(\r\n                                [\r\n                                  {\r\n                                    prop: \"answers.\" + question_index,\r\n                                    value: null,\r\n                                  },\r\n                                ],\r\n                                UPDATE_QUESTIONS_PROPS\r\n                              )\r\n                        }\r\n                        checked={\r\n                          answers.find(\r\n                            (an) =>\r\n                              an &&\r\n                              an.answer === choice.value &&\r\n                              an.question_id === element.id\r\n                          )\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                      <label htmlFor={\"checkbox\" + index}></label>\r\n                    </div>\r\n                    <div className=\"question_label\">{choice.label}</div>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mt-4\">\r\n          <Col xl={12} lg={12} md={12} sm={12} xs={12} className=\"center\">\r\n            <Button\r\n              className=\"ques_btn center\"\r\n              onClick={handlePrevious}\r\n              disabled={question_index === 0 ? true : false}\r\n            >\r\n              previous\r\n            </Button>\r\n            <Button\r\n              className=\"ques_btn center\"\r\n              onClick={question_index === 4 ? handleSave : handleNext}\r\n            >\r\n              {question_index === 4 ? \"Save\" : \"Next\"}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../Redux/Actions/index\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Header from \"../../ReusableCompnents/Header\";\r\nimport { UserPrompt } from \"./UserPrompt\";\r\nimport { QuestionCard } from \"./QuestionCard\";\r\nconst Questions = ({\r\n  prompet,\r\n  general,\r\n  question_index,\r\n  answers,\r\n  questions,\r\n}) => {\r\n  return (\r\n    <div className=\"page_container\">\r\n      <Row>\r\n        <Col xl={12} lg={12} md={12} sm={12} xs={12}>\r\n          <Header />\r\n        </Col>\r\n      </Row>\r\n      <h1 className=\"text-center mt-3 black_color\">Simple Questions App</h1>\r\n      <Row>\r\n        <Col xl={12} lg={12} md={12} sm={12} xs={12} className=\"center mx-auto\">\r\n          {prompet.isRegister ? (\r\n            <QuestionCard\r\n              element={questions[question_index]}\r\n              questions={questions}\r\n              general={general}\r\n              question_index={question_index}\r\n              answers={answers}\r\n            />\r\n          ) : (\r\n            <UserPrompt general={general} prompet={prompet} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ QuestionsR }) => {\r\n  return {\r\n    prompet: QuestionsR.prompet,\r\n    answers: QuestionsR.answers,\r\n    questions: QuestionsR.questions,\r\n    question_index: QuestionsR.question_index,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, actions)(Questions);\r\n","import React, { Component } from \"react\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducers from \"../src/Redux/Reducers/index\";\r\nimport Questions from \"./Components/Questions/Questions\";\r\nimport \"./assets/style.css\";\r\nconst store = createStore(reducers, {}, compose(applyMiddleware(ReduxThunk)));\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Questions />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}